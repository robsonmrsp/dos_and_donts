/*  generated by JSetup v0.95 :  at 24 de jun de 2021 00:08:20 */
package com.robsonmrsp.netflics.controller;

import static org.springframework.http.HttpStatus.BAD_REQUEST;
import static org.springframework.http.HttpStatus.CREATED;
import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.robsonmrsp.netflics.commonlibs.FilterMovie;
import com.robsonmrsp.netflics.commonlibs.JsonError;
import com.robsonmrsp.netflics.commonlibs.JsonMovie;
import com.robsonmrsp.netflics.commonlibs.JsonPaginator;
import com.robsonmrsp.netflics.commonlibs.Pager;
import com.robsonmrsp.netflics.commonlibs.Parser;
import com.robsonmrsp.netflics.commonlibs.SearchParameters;
import com.robsonmrsp.netflics.commonlibs.ValidationException;
import com.robsonmrsp.netflics.entity.Movie;
import com.robsonmrsp.netflics.service.MovieService;

@RestController
@RequestMapping("/rs/crud/movies")
@SuppressWarnings({"unchecked", "rawtypes"})
public class MovieController {
  @Autowired MovieService movieService;
  public static final Logger LOGGER = LoggerFactory.getLogger(MovieController.class);

  @RequestMapping(method = GET, produces = APPLICATION_JSON_VALUE)
  public ResponseEntity get(@RequestParam MultiValueMap<String, String> mapParams) {
    ResponseEntity response = null;

    Pager<Movie> movies = null;
    try {
      SearchParameters<FilterMovie> paginationParams =
          new SearchParameters<FilterMovie>(mapParams, FilterMovie.class);

      movies = movieService.get(paginationParams);

      JsonPaginator<JsonMovie> paginator =
          JsonPaginator.of(
              Parser.toListJsonMovies(movies.getItems()),
              movies.getActualPage(),
              movies.getPageSize(),
              movies.getOrder(),
              movies.getOrderBy(),
              movies.getTotalRecords());

      response = ResponseEntity.ok(paginator);

    } catch (Exception e) {
      String message =
          String.format(
              "Não foi possivel carregar movies para os parametros %s [%s]",
              mapParams.toString(), e.getMessage());
      LOGGER.error(message, e);
      response = ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, null));
    }
    return response;
  }

  @RequestMapping(value = "{id:\\d+}", method = GET, produces = APPLICATION_JSON_VALUE)
  public ResponseEntity get(@PathVariable("id") String id) {
    try {
      Optional<com.robsonmrsp.netflics.entity.Movie> optional = movieService.get(id);

      if (optional.isPresent()) {
        return ResponseEntity.ok(Parser.toJson(optional.get()));
      }

      return ResponseEntity.notFound().build();

    } catch (Exception e) {
      String message =
          String.format(
              "Não foi possivel carregar o registro. [ %s ] parametros [ %d ]", e.getMessage(), id);
      LOGGER.error(message, e);
      return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, null));
    }
  }

  @RequestMapping(method = POST, produces = APPLICATION_JSON_VALUE)
  public ResponseEntity save(@RequestBody JsonMovie jsonMovie) {
    try {
      Movie movie = Parser.toEntity(jsonMovie);

      movie = movieService.save(movie);

      return ResponseEntity.status(CREATED).body(Parser.toJson(movie));

    } catch (ValidationException e) {
      String message =
          String.format(
              "Não foi possivel salvar  o registro [ %s ] parametros [ %s ]",
              e.getOrigem().getMessage(), jsonMovie.toString());
      LOGGER.error(message, e.getOrigem());
      return ResponseEntity.status(BAD_REQUEST)
          .body(new JsonError(e, message, jsonMovie, e.getLegalMessage()));
    } catch (Exception e) {
      String message =
          String.format(
              "Não foi possivel salvar  movie [ %s ] parametros [ %s ]",
              e.getMessage(), jsonMovie.toString());
      LOGGER.error(message, e);
      return ResponseEntity.status(INTERNAL_SERVER_ERROR)
          .body(new JsonError(e, message, jsonMovie));
    }
  }

  @RequestMapping(value = "{id:\\d+}", method = PUT, produces = APPLICATION_JSON_VALUE)
  public ResponseEntity update(@PathVariable("id") Integer id, @RequestBody JsonMovie jsonMovie) {
    try {
      Movie movie = Parser.toEntity(jsonMovie);

      movie = movieService.update(movie);

      return ResponseEntity.ok(Parser.toJson(movie));
    } catch (ValidationException e) {
      String message =
          String.format(
              "Não foi possivel salvar  o registro [ %s ] parametros [ %s ]",
              e.getOrigem().getMessage(), jsonMovie.toString());
      LOGGER.error(message, e.getOrigem());
      return ResponseEntity.status(BAD_REQUEST)
          .body(new JsonError(e, message, jsonMovie, e.getLegalMessage()));
    } catch (Exception e) {
      String message =
          String.format(
              "Não foi possivel salvar o registro [ %s ] parametros [ %s ]",
              e.getMessage(), jsonMovie.toString());
      LOGGER.error(message, e);
      return ResponseEntity.status(INTERNAL_SERVER_ERROR)
          .body(new JsonError(e, message, jsonMovie));
    }
  }

  @RequestMapping(value = "{id:\\d+}", method = DELETE)
  public ResponseEntity delete(@PathVariable("id") String id) {
    try {
      movieService.delete(id);
      return ResponseEntity.noContent().build();
    } catch (Exception e) {
      String message =
          String.format(
              "Não foi possivel remover o registro [ %s ] parametros [ %s ]", e.getMessage(), id);
      LOGGER.error(message, e);
      return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, id));
    }
  }
}
// generated by JSetup v0.95 :  at 24 de jun de 2021 00:08:20
